{"version":3,"sources":["components/Card.tsx","components/ContextProvider.ts","components/ContextConsumer.tsx","components/TodoPage.tsx","App.tsx","index.tsx"],"names":["Card","props","listOfTodos","map","todo","className","onClick","removeTodo","id","content","ContextProvider","createContext","ContextConsumer","useContext","contextValue","setContextValue","console","log","TodoPage","useState","newTodo","setNewTodo","todos","setTodos","useEffect","getTodos","a","fetch","response","ok","json","submitPressed","method","submitPressedBody","requestOptions","body","JSON","stringify","new_todo","submitPressedModel","todo_description","Provider","value","type","onChange","e","target","placeholder","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRA0BeA,MAxBf,SAAcC,GAOV,OACI,8BACKA,EAAMC,aACHD,EAAMC,YAAYC,KAAI,SAACC,GACnB,OACI,qBAAkBC,UARrB,gBAQG,UACI,wBAAQA,UARd,mBAQoCC,QAAS,kBAAML,EAAMM,WAAWH,EAAKI,KAAnE,oBAGA,oBAAIH,UAVD,UAUH,SAAoCD,EAAKK,YAJpCL,EAAKI,UCZhCE,EAAkBC,wBAAc,aCCvB,SAASC,IAEpB,MAA0CC,qBAAWH,GAA7CI,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAItB,OAFAC,QAAQC,IAAIH,GAGR,gCACI,8BAAMA,IACN,wBACIT,UAAW,eACXC,QAAS,WACLS,EAAiC,QAAjBD,EAAyB,MAAQ,QAHzD,4BC8FGI,MArGf,WACI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAA4C,IAAtE,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAAwCJ,mBAAS,aAAjD,mBAAOL,EAAP,KAAqBC,EAArB,KACAC,QAAQC,IAAIH,GAEZU,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAQ,uCAAG,4BAAAC,EAAA,sEACUC,MAAM,QADhB,YACPC,EADO,QAEAC,GAFA,6BAGTN,EAHS,SAGMK,EAASE,OAHf,0DAMTP,EAAS,CAAC,CAAEf,GAAI,EAAGC,QAAS,kBANnB,4CAAH,qDAURsB,EAAa,uCAAG,sBAAAL,EAAA,sEAOZC,MAAM,QAAD,OAASP,GAAW,CAC3BY,OAAQ,SARM,cAUlBX,EAAW,IAVO,SAWZI,IAXY,2CAAH,qDAcbQ,EAAiB,uCAAG,4BAAAP,EAAA,6DAEhBQ,EAAiB,CACnBF,OAAQ,OACRG,KAAMC,KAAKC,UAAU,CACjBC,SAAUlB,KAGlBO,MAAM,YAAaO,GACnBb,EAAW,IATW,SAUhBI,IAVgB,2CAAH,qDAajBc,EAAkB,uCAAG,4BAAAb,EAAA,6DAEjBQ,EAAiB,CACnBF,OAAQ,OACRG,KAAMC,KAAKC,UAAU,CACjBG,iBAAkBpB,KAG1BO,MAAM,aAAcO,GACpBb,EAAW,IATY,SAUjBI,IAViB,2CAAH,qDAalBlB,EAAU,uCAAG,WAAOC,GAAP,SAAAkB,EAAA,sEACTC,MAAM,QAAD,OAASnB,GAAM,CACtBwB,OAAQ,WAFG,uBAITP,IAJS,2CAAH,sDAOhB,OACI,sBAAKpB,UAAU,gBAAf,UACI,cAACK,EAAgB+B,SAAjB,CAEIC,MAAO,CAAE5B,eAAcC,mBAF3B,SAII,cAACH,EAAD,MAEJ,sBAAKP,UAAU,gBAAf,UACI,uBACIsC,KAAK,OACLD,MAAOtB,EACPwB,SAAU,SAACC,GACPxB,EAAWwB,EAAEC,OAAOJ,QAExBK,YAAY,mBACZ1C,UAAU,uBAEd,wBAAQC,QAASyB,EAAe1B,UAAU,qBAA1C,oBAGA,wBAAQC,QAAS2B,EAAmB5B,UAAU,qBAA9C,wBAGA,wBAAQC,QAASiC,EAAoBlC,UAAU,qBAA/C,4BAIJ,cAAC,EAAD,CAAMH,YAAaoB,EAAOf,WAAYA,QCxFnCyC,E,4JATX,WACI,OACI,8BACI,cAAC,EAAD,U,GAJEC,aCElBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.5778257b.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\"\n\nfunction Card(props: {\n    listOfTodos: { id: number; content: string }[]\n    removeTodo: (id: number) => void\n}): ReactElement {\n    const cssClass = \"flex flex-row\"\n    const cssButton = \"m-1 p-1 border-2\"\n    const cssTodoDescription = \"m-1 p-1\"\n    return (\n        <div>\n            {props.listOfTodos &&\n                props.listOfTodos.map((todo) => {\n                    return (\n                        <ul key={todo.id} className={cssClass}>\n                            <button className={cssButton} onClick={() => props.removeTodo(todo.id)}>\n                                Remove\n                            </button>\n                            <li className={cssTodoDescription}>{todo.content}</li>\n                        </ul>\n                    )\n                })}\n        </div>\n    )\n}\n\nexport default Card\n","import { createContext } from \"react\"\n\nconst ContextProvider = createContext(\"some text\")\n\nexport { ContextProvider }\n","import React, { ReactElement, useContext } from \"react\"\nimport { ContextProvider } from \"./ContextProvider\"\n\nexport default function ContextConsumer(): ReactElement {\n    // @ts-ignore\n    const { contextValue, setContextValue } = useContext(ContextProvider)\n\n    console.log(contextValue)\n\n    return (\n        <div>\n            <div>{contextValue}</div>\n            <button\n                className={\"p-1 border-2\"}\n                onClick={() => {\n                    setContextValue(contextValue === \"asd\" ? \"dsa\" : \"asd\")\n                }}\n            >\n                Change data\n            </button>\n        </div>\n    )\n}\n","import React, { useState, useEffect, ReactElement } from \"react\"\nimport Card from \"./Card\"\nimport ContextConsumer from \"./ContextConsumer\"\nimport { ContextProvider } from \"./ContextProvider\"\n\nfunction TodoPage(): ReactElement {\n    const [newTodo, setNewTodo] = useState(\"\")\n    const [todos, setTodos] = useState<{ id: number; content: string }[]>([])\n    // Context variable example\n    const [contextValue, setContextValue] = useState(\"some text\")\n    console.log(contextValue)\n\n    useEffect(() => {\n        getTodos()\n    }, [])\n\n    const getTodos = async () => {\n        const response = await fetch(\"/api\")\n        if (response.ok) {\n            setTodos(await response.json())\n        } else {\n            // @ts-ignore\n            setTodos([{ id: 0, content: \"SERVER ERROR\" }])\n        }\n    }\n\n    const submitPressed = async () => {\n        /*\n        To add optional search params, use:\n        let params = new URLSearchParams(\"\")\n        params.set(\"mykey\", \"myvalue\")\n        fetch(`/api/${newTodo}?` + params.toString(), requestOptions)\n         */\n        await fetch(`/api/${newTodo}`, {\n            method: \"POST\",\n        })\n        setNewTodo(\"\")\n        await getTodos()\n    }\n\n    const submitPressedBody = async () => {\n        // When using request body:\n        const requestOptions = {\n            method: \"POST\",\n            body: JSON.stringify({\n                new_todo: newTodo,\n            }),\n        }\n        fetch(\"/api_body\", requestOptions)\n        setNewTodo(\"\")\n        await getTodos()\n    }\n\n    const submitPressedModel = async () => {\n        // When using request body:\n        const requestOptions = {\n            method: \"POST\",\n            body: JSON.stringify({\n                todo_description: newTodo,\n            }),\n        }\n        fetch(\"/api_model\", requestOptions)\n        setNewTodo(\"\")\n        await getTodos()\n    }\n\n    const removeTodo = async (id: number) => {\n        await fetch(`/api/${id}`, {\n            method: \"DELETE\",\n        })\n        await getTodos()\n    }\n\n    return (\n        <div className=\"flex flex-col\">\n            <ContextProvider.Provider\n                // @ts-ignore\n                value={{ contextValue, setContextValue }}\n            >\n                <ContextConsumer />\n            </ContextProvider.Provider>\n            <div className=\"flex flex-row\">\n                <input\n                    type=\"text\"\n                    value={newTodo}\n                    onChange={(e) => {\n                        setNewTodo(e.target.value)\n                    }}\n                    placeholder=\"My new todo item\"\n                    className=\"border-2 my-2 mx-1\"\n                />\n                <button onClick={submitPressed} className=\"border-2 my-2 mx-1\">\n                    Submit\n                </button>\n                <button onClick={submitPressedBody} className=\"border-2 my-2 mx-1\">\n                    SubmitBody\n                </button>\n                <button onClick={submitPressedModel} className=\"border-2 my-2 mx-1\">\n                    SubmitModel\n                </button>\n            </div>\n            <Card listOfTodos={todos} removeTodo={removeTodo} />\n        </div>\n    )\n}\n\nexport default TodoPage\n","import React, { Component, ReactElement } from \"react\"\nimport TodoPage from \"./components/TodoPage\"\n\nclass App extends Component {\n    render(): ReactElement {\n        return (\n            <div>\n                <TodoPage />\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}