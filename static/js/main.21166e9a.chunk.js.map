{"version":3,"sources":["components/Card.tsx","components/TodoPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","listOfTodos","map","todo","key","id","className","onClick","removeTodo","content","TodoPage","useState","newTodo","setNewTodo","todos","setTodos","useEffect","getTodos","fetch","then","response","ok","json","data","type","value","onChange","e","target","placeholder","method","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kOAuBeA,MArBf,SAAcC,GAIV,OACI,6BACKA,EAAMC,aACHD,EAAMC,YAAYC,KAAI,SAACC,GACnB,OACI,wBAAIC,IAAKD,EAAKE,GAAIC,UARvB,iBASS,4BAAQA,UARhB,mBAQsCC,QAAS,kBAAMP,EAAMQ,WAAWL,EAAKE,MAAnE,UAGA,wBAAIC,UAVH,WAUmCH,EAAKM,eCsEtDC,MAlFf,SAAkBV,GAAa,IAAD,EACIW,mBAAS,IADb,mBACnBC,EADmB,KACVC,EADU,OAEAF,mBAAS,IAFT,mBAEnBG,EAFmB,KAEZC,EAFY,KAI1BC,qBAAU,WACNC,MACD,IAEH,IAAIA,EAAW,WACXC,MAAM,QACDC,MAAK,SAACC,GACH,OAAIA,EAASC,GACFD,EAASE,OAIT,CACH,CACIjB,GAAI,EACJI,QAAS,oBAIxBU,MAAK,SAACI,GACHR,EAASQ,OAqCrB,OACI,yBAAKjB,UAAU,iBACX,yBAAKA,UAAU,iBACX,2BACIkB,KAAK,OACLC,MAAOb,EACPc,SAAU,SAACC,GACPd,EAAWc,EAAEC,OAAOH,QAExBI,YAAY,mBACZvB,UAAU,uBAEd,4BAAQC,QA7CA,WAoBhBW,MAAM,QAAD,OAASN,GAnBO,CACjBkB,OAAQ,SAmBZjB,EAAW,IACXI,KAuBwCX,UAAU,sBAA1C,WAIJ,kBAAC,EAAD,CAAML,YAAaa,EAAON,WAxBjB,SAACH,GAIda,MAAM,QAAD,OAASb,GAHO,CACjByB,OAAQ,WAGZb,SChDOc,E,uKARP,OACI,6BACI,kBAAC,EAAD,W,GAJEC,aCSEC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB1B,MAAK,SAAC2B,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21166e9a.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Card(props: any) {\n    let cssClass = \"flex flex-row\"\n    let cssButton = \"m-1 p-1 border-2\"\n    let cssTodoDescription = \"m-1 p-1\"\n    return (\n        <div>\n            {props.listOfTodos &&\n                props.listOfTodos.map((todo: any) => {\n                    return (\n                        <ul key={todo.id} className={cssClass}>\n                            <button className={cssButton} onClick={() => props.removeTodo(todo.id)}>\n                                Remove\n                            </button>\n                            <li className={cssTodoDescription}>{todo.content}</li>\n                        </ul>\n                    )\n                })}\n        </div>\n    )\n}\n\nexport default Card\n","import React, { useState, useEffect } from \"react\"\nimport Card from \"./Card\"\n\nfunction TodoPage(props: any) {\n    const [newTodo, setNewTodo] = useState(\"\")\n    const [todos, setTodos] = useState([])\n\n    useEffect(() => {\n        getTodos()\n    }, [])\n\n    let getTodos = () => {\n        fetch(\"/api\")\n            .then((response) => {\n                if (response.ok) {\n                    return response.json()\n                }\n                // TODO Better error handling when server is offline\n                else\n                    return [\n                        {\n                            id: 0,\n                            content: \"SERVER ERROR\",\n                        },\n                    ]\n            })\n            .then((data) => {\n                setTodos(data)\n            })\n    }\n\n    let submitPressed = () => {\n        let requestOptions = {\n            method: \"POST\",\n        }\n        /*\n        To add optional search params, use:\n        let params = new URLSearchParams(\"\")\n        params.set(\"mykey\", \"myvalue\")\n        fetch(`/api/${newTodo}?` + params.toString(), requestOptions)\n         */\n        // When using request body:\n        /*\n        let requestOptions = {\n            method: \"POST\",\n            body: JSON.stringify({\n                new_todo: newTodo,\n            }),\n        }\n        fetch(\"/api\", requestOptions)\n         */\n        fetch(`/api/${newTodo}`, requestOptions)\n        setNewTodo(\"\")\n        getTodos()\n    }\n\n    let removeTodo = (id: number) => {\n        let requestOptions = {\n            method: \"DELETE\",\n        }\n        fetch(`/api/${id}`, requestOptions)\n        getTodos()\n    }\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"flex flex-row\">\n                <input\n                    type=\"text\"\n                    value={newTodo}\n                    onChange={(e) => {\n                        setNewTodo(e.target.value)\n                    }}\n                    placeholder=\"My new todo item\"\n                    className=\"border-2 my-2 mx-1\"\n                />\n                <button onClick={submitPressed} className=\"border-2 my-2 mx-1\">\n                    Submit\n                </button>\n            </div>\n            <Card listOfTodos={todos} removeTodo={removeTodo} />\n        </div>\n    )\n}\n\nexport default TodoPage\n","import React, { Component } from \"react\"\nimport TodoPage from \"./components/TodoPage\"\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <TodoPage />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}